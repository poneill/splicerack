#+TITLE: Splicerack README
#+AUTHOR: Patrick O'Neill
#+EMAIL: synapse.and.syntax@gmail.com

* Background and motivation
** What is splicerack?
splicerack aims to be a collection of tools to aid in the analysis of DNA
splicing languages.  splicerack is a student project written by an amateur,
a fact which I will appreciate you bearing in mind while you read the source!
** What are DNA splicing languages?
DNA splicing languages are formal languages which arise from the iterated
splicing action of restriction enzymes on a set of initial strings.  [[http://www.math.binghamton.edu/dennis/Papers/splicing.pdf][Here]] [pdf]
is a good overview of the topic by Head and Pixton.  
** What can splicerack do?
Currently, splicerack can accept a splicing system as input and generate the NFA
of the corresponding splicing language.  Development is just underway, and
splicerack's features are in flux.
** How does splicerack convert splicing systems to NFAs?
It follows the constructive proof given in the paper above.  Any bugs are due to
my implementation of the algorithm.  Please be liberal with comments and
criticism.
* Installation and use
** What do I need in order to setup splicerack?
*** Python
splicerack was written on Python2.6, but AFAIK it should not put up much of a
fight against Python3 or 2to3.py.  Please contact me if splicerack is giving
your python version static.
*** splicerack
If cloning the repo is a live option for you, you probably know more about this
stuff than I do, so use good judgment and act accordingly.  Otherwise just
download all files to an appropriately named folder.
*** graphviz
splicerack currently expects graphviz to be installed.  If graphviz isn't
installed on your Debian-based system, you can install it with:

: sudo apt-get install graphviz

and if you don't have a Debian-based system, you probably know as much about
getting it installed as I do.  [[http://www.graphviz.org/Download.php][This page]] may help.
*** How do I use splicerack?
Currently, you would use splicerack if you had a splicing system and wanted to
know its associated NFA.  splicerack supposes you have the splicing system
specified in what I will term /Pixton format/.  In fact, splicerack is currently
only a partial implementation of the Pixton format; only the features described
below are guaranteed to work.  It is recommended that you give input files a
=.head= extension; while splicerack will accept any extension, it requires that
the input files have /some/ extension.  Otherwise it will not know what to call
the postscript output.  Here is an example input file:

: [parameters]
: # You can set symmetry and reflexivity in this way, per Pixton's original
: # format.  Symmetric is either 0 or 1.  type is either head or non-reflexive.
: symmetric 0
: type non-reflexive
: [alphabet]
: # Included for back-compatibility for Pixton format.  splicerack ignores this 
: # parameter.
: [rules]
: # Rules must be separated by whitespace.  
: # For now, Use "1" for the empty string, (not "").
: a,1;1,b
: a,1;1,a 
: b,1;1,b 
: 1,a;b,1
: [axioms]
: # Axioms must be separated by whitespace and come last in the file. 
: ab


Command line usage is as follows:
: $./splicerack.py example.head

If all goes well, this should produce the postscript file example.ps in the
current working directory, which can be examined with your favorite postscript
viewer.
